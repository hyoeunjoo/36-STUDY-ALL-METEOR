import java.util.*;

class Solution {
    public int solution(int n, int[][] computers) {
        List<List<Integer>> adj = new ArrayList<>(n);
        for (int i = 0; i < n; i++) adj.add(new ArrayList<>());

        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (computers[i][j] == 1) {
                    adj.get(i).add(j);
                    adj.get(j).add(i);
                }
            }
        }

        boolean[] visited = new boolean[n];
        int networks = 0;

        for (int v = 0; v < n; v++) {
            if (!visited[v]) {
                networks++;
                dfs(v, adj, visited);
            }
        }
        return networks;
    }

    private void dfs(int v, List<List<Integer>> adj, boolean[] visited) {
        visited[v] = true;
        for (int u : adj.get(v)) {
            if (!visited[u]) dfs(u, adj, visited);
        }
    }
}
